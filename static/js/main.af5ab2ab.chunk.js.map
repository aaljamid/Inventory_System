{"version":3,"sources":["stock.png","Components/InvListContainer.js","Components/Inventory.js","Components/Home.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InventoryTable","React","useState","columns","title","field","type","data","itemName","category","quantity","location","state","setState","options","exportButton","selection","grouping","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","allRowsDelete","Inventory","Component","Home","props","src","axios","get","then","res","console","log","className","NavBar","time","datetime","timeHr","Date","class","href","Logo","width","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","moment","format","path","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af5ab2ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stock.47bb1941.png\";","import React from \"react\";\r\n// use material-table for table component\r\nimport MaterialTable from \"material-table\";\r\n// import Alert from \"@material-ui/core/Button\";\r\n\r\nexport default function InventoryTable() {\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      // putting dummy data for demonstration\r\n      { title: \"Item itemName\", field: \"itemName\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Quantity\", field: \"quantity\", type: \"numeric\" },\r\n      { title: \"Location\", field: \"location\" }\r\n    ],\r\n    // putting dummy data for demonstration purpose\r\n    data: [\r\n      {\r\n        itemName: \"Bread\",\r\n        category: \"Food\",\r\n        quantity: 15,\r\n        location: \"ABC Warehouse\"\r\n      },\r\n      {\r\n        itemName: \"Water\",\r\n        category: \"Drink\",\r\n        quantity: 20,\r\n        location: \"XYZ Warehouse\"\r\n      }\r\n    ]\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* the start of the table  */}\r\n      {/* <Alert severity=\"success\">This is a success alert â€” check it out!</Alert> */}\r\n      <MaterialTable\r\n        // utilize export,slection, and grouping functions   from material-table library\r\n        options={{\r\n          exportButton: true,\r\n          selection: true,\r\n          grouping: true\r\n        }}\r\n        title=\"Inventory\"\r\n        columns={state.columns}\r\n        data={state.data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState(prevState => {\r\n                  const data = [...prevState.data];\r\n                  data.push(newData);\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 500);\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                if (oldData) {\r\n                  setState(prevState => {\r\n                    const data = [...prevState.data];\r\n                    data[data.indexOf(oldData)] = newData;\r\n                    return { ...prevState, data };\r\n                  });\r\n                }\r\n              }, 600);\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState(prevState => {\r\n                  const data = [...prevState.data];\r\n                  data.splice(data.indexOf(oldData), 1);\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n          allRowsDelete: oldData =>\r\n            new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState(prevState => {\r\n                  const data = [];\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            })\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React from \"react\";\r\n// import ListItem from \"./ListItem\";\r\n// import ListTable from \"./ListTable\";\r\n\r\n// export default class InvListContainer extends React.Component {\r\n//   render() {\r\n//     const allItems = this.props.toAddItems.map(function(task, index) {\r\n//       return (\r\n//         <div>\r\n//           <ListItem invItem={task} key={index} />\r\n//           {/* <ListTable invItem={task} key={index} />; */}\r\n//         </div>\r\n//       );\r\n//     });\r\n//     return (\r\n//       <div>\r\n//         <ul>{allItems} </ul> <ListTable />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import React, { Component } from \"react\";\r\n\r\n// import the InvListContainer\r\nimport InvListContainer from \"./InvListContainer\";\r\n\r\nexport class Inventory extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InvListContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n\r\n// import React from \"react\";\r\n// import InvListContainer from \"./InvListContainer\";\r\n\r\n// export default class Inventory extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       toAddItems: [\"just a test\", \"Test the function \", \"test 3\"],\r\n//       newItem: \"\"\r\n//     };\r\n//   }\r\n\r\n//   addItem = e => {\r\n//     e.preventDefault();\r\n//     console.log(\"Add Item!\");\r\n//     this.setState({\r\n//       toAddItems: [...this.state.toAddItems, this.state.newItem],\r\n//       newItem: \"\"\r\n//     });\r\n//   };\r\n\r\n//   removeAllItem = e => {\r\n//     e.preventDefault();\r\n//     console.log(\"RemoveAll Item!\");\r\n//     this.setState({\r\n//       toAddItems: [],\r\n//       newItem: \"\"\r\n//     });\r\n//   };\r\n\r\n//   onTextBoxChange = e => {\r\n//     console.log(\"On Text Change\", e.target.value);\r\n//     this.setState({\r\n//       newItem: e.target.value\r\n//     });\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       //  main div for the image, it gets the information\r\n//       //  from the parent props\r\n\r\n//       <div class=\"container\">\r\n//         <form>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Enter New Item!\"\r\n//             value={this.state.newItem}\r\n//             onChange={this.onTextBoxChange}\r\n//           />\r\n\r\n//           <button type=\"button\" class=\"btn btn-dark m-2\" onClick={this.addItem}>\r\n//             Add Item!\r\n//           </button>\r\n//           <button\r\n//             type=\"button\"\r\n//             class=\"btn btn-dark m-2\"\r\n//             onClick={this.removeAllItem}\r\n//           >\r\n//             Remove All\r\n//           </button>\r\n//         </form>\r\n//         <hr />\r\n//         <InvListContainer toAddItems={this.state.toAddItems} />\r\n\r\n//         {/* <div class=\"container\">\r\n//           <div class=\"row align-items-center\">\r\n//             <div class=\"col\">\r\n//               <table class=\"table\">\r\n//                 <thead class=\"thead-light\">\r\n//                   <tr>\r\n//                     <th scope=\"col\">#</th>\r\n//                     <th scope=\"col\">First</th>\r\n//                     <th scope=\"col\">Last</th>\r\n//                     <th scope=\"col\">Handle</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   <tr>\r\n//                     <th scope=\"row\">1</th>\r\n//                     <td>Mark</td>\r\n//                     <td>Otto</td>\r\n//                     <td>@mdo</td>\r\n//                   </tr>\r\n//                   <tr>\r\n//                     <th scope=\"row\">2</th>\r\n//                     <td>Jacob</td>\r\n//                     <td>Thornton</td>\r\n//                     <td>@fat</td>\r\n//                   </tr>\r\n//                   <tr>\r\n//                     <th scope=\"row\">3</th>\r\n//                     <td>Larry</td>\r\n//                     <td>the Bird</td>\r\n//                     <td>@twitter</td>\r\n//                   </tr>\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           </div>\r\n//         </div> */}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// import React from \"react\";\r\n// import MaterialTable from \"material-table\";\r\n\r\n// export default function MaterialTableDeo() {\r\n//   const [state, setState] = React.useState({\r\n//     columns: [\r\n//       { title: \"Item itemName\", field: \"itemName\" },\r\n//       { title: \"Category\", field: \"category\" },\r\n//       { title: \"Quantity\", field: \"quantity\", type: \"numeric\" },\r\n//       {\r\n//         title: \"Location\",\r\n//         field: \"location\"\r\n//         // lookup: { 34: \"ABC Warehouse\", 63: \"XYZ Warehouse\" }\r\n//       }\r\n//     ],\r\n//     data: [\r\n//       {\r\n//         itemName: \"Bread\",\r\n//         category: \"Food\",\r\n//         quantity: 15,\r\n//         location: \"ABC Warehouse\"\r\n//       },\r\n//       {\r\n//         itemName: \"Water\",\r\n//         category: \"Drink\",\r\n//         quantity: 20,\r\n//         location: \"XYZ Warehouse\"\r\n//       }\r\n//     ]\r\n//   });\r\n\r\n//   return (\r\n//     <MaterialTable\r\n//       title=\"Inventory\"\r\n//       columns={state.columns}\r\n//       data={state.data}\r\n//       editable={{\r\n//         onRowAdd: newData =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               setState(prevState => {\r\n//                 const data = [...prevState.data];\r\n//                 data.push(newData);\r\n//                 return { ...prevState, data };\r\n//               });\r\n//             }, 500);\r\n//           }),\r\n//         onRowUpdate: (newData, oldData) =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               if (oldData) {\r\n//                 setState(prevState => {\r\n//                   const data = [...prevState.data];\r\n//                   data[data.indexOf(oldData)] = newData;\r\n//                   return { ...prevState, data };\r\n//                 });\r\n//               }\r\n//             }, 600);\r\n//           }),\r\n//         onRowDelete: oldData =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               setState(prevState => {\r\n//                 const data = [...prevState.data];\r\n//                 data.splice(data.indexOf(oldData), 1);\r\n//                 return { ...prevState, data };\r\n//               });\r\n//             }, 600);\r\n//           }),\r\n\r\n//         allRowsDelete: oldData =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               setState(prevState => {\r\n//                 const data = [];\r\n//                 return { ...prevState, data };\r\n//               });\r\n//             }, 600);\r\n//           })\r\n//       }}\r\n//     />\r\n//   );\r\n// }\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport axios from \"axios\";\r\n\r\nexport class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      src: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url =\r\n      \"https://api.unsplash.com/photos/random?client_id=c9ce7ec20ba10268b6fbac6164f37ac58339814bae875199a42ba551bdc38702\";\r\n    axios.get(url).then(res => {\r\n      console.log(res.data);\r\n\r\n      // this.setState({ time: res.data.datetime });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"homeStyle\">\r\n        <h1> HOME.v2</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n// import React from \"react\";\r\n// import MaterialTable from \"material-table\";\r\n\r\n// export default function MaterialTableDeo() {\r\n//   const [state, setState] = React.useState({\r\n//     columns: [\r\n//       { title: \"Item itemName\", field: \"itemName\" },\r\n//       { title: \"Category\", field: \"category\" },\r\n//       { title: \"Quantity\", field: \"quantity\", type: \"numeric\" },\r\n//       {\r\n//         title: \"Location\",\r\n//         field: \"location\"\r\n//         // lookup: { 34: \"ABC Warehouse\", 63: \"XYZ Warehouse\" }\r\n//       }\r\n//     ],\r\n//     data: [\r\n//       {\r\n//         itemName: \"Bread\",\r\n//         category: \"Food\",\r\n//         quantity: 15,\r\n//         location: \"ABC Warehouse\"\r\n//       },\r\n//       {\r\n//         itemName: \"Water\",\r\n//         category: \"Drink\",\r\n//         quantity: 20,\r\n//         location: \"XYZ Warehouse\"\r\n//       }\r\n//     ]\r\n//   });\r\n\r\n//   return (\r\n//     <MaterialTable\r\n//       title=\"Inventory\"\r\n//       columns={state.columns}\r\n//       data={state.data}\r\n//       editable={{\r\n//         onRowAdd: newData =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               setState(prevState => {\r\n//                 const data = [...prevState.data];\r\n//                 data.push(newData);\r\n//                 return { ...prevState, data };\r\n//               });\r\n//             }, 600);\r\n//           }),\r\n//         onRowUpdate: (newData, oldData) =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               if (oldData) {\r\n//                 setState(prevState => {\r\n//                   const data = [...prevState.data];\r\n//                   data[data.indexOf(oldData)] = newData;\r\n//                   return { ...prevState, data };\r\n//                 });\r\n//               }\r\n//             }, 600);\r\n//           }),\r\n//         onRowDelete: oldData =>\r\n//           new Promise(resolve => {\r\n//             setTimeout(() => {\r\n//               resolve();\r\n//               setState(prevState => {\r\n//                 const data = [...prevState.data];\r\n//                 data.splice(data.indexOf(oldData), 1);\r\n//                 return { ...prevState, data };\r\n//               });\r\n//             }, 600);\r\n//           })\r\n//       }}\r\n//     />\r\n//   );\r\n// }\r\n","import React from \"react\";\r\n//import bootstrap library\r\nimport bootstrap from \"bootstrap\";\r\n// import the inventory and gome classess\r\nimport Inventory from \"./Inventory\";\r\nimport Home from \"./Home\";\r\n// import the page icon\r\nimport Logo from \"../stock.png\";\r\n// import the router\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n// import the moment-js to display the time\r\nimport moment from \"moment\";\r\n\r\n// import the axios for API request\r\nimport axios from \"axios\";\r\n\r\nexport default class NavBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\"http://worldtimeapi.org/api/ip\").then(res => {\r\n      console.log(res.data.datetime);\r\n      const timeHr = new Date();\r\n      console.log(timeHr);\r\n      this.setState({ time: res.data.datetime });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          {/* start of bootstrap navbar  */}\r\n          <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a class=\"navbar-brand\" href=\"#\">\r\n              <img src={Logo} width=\"50px\"></img>\r\n            </a>\r\n            <button\r\n              class=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#navbarText\"\r\n              aria-controls=\"navbarText\"\r\n              aria-expanded=\"false\"\r\n              aria-label=\"Toggle navigation\"\r\n            >\r\n              <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarText\">\r\n              <ul class=\"navbar-nav mr-auto\">\r\n                <li class=\"nav-item active\">\r\n                  <Link to=\"/\">\r\n                    <a class=\"nav-link\">\r\n                      Home\r\n                      <span class=\"sr-only\">(current)</span>\r\n                    </a>\r\n                  </Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <Link to=\"/inventory\">\r\n                    <a class=\"nav-link\">Inventory</a>\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n              <span class=\"navbar-text\">\r\n                {moment().format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n              </span>\r\n            </div>\r\n          </nav>\r\n          {/* start of bootstrap navbar  */}\r\n        </div>\r\n\r\n        <div>\r\n          {/* the pages router  */}\r\n          <Switch>\r\n            <Route path=\"/inventory\">\r\n              <Inventory />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./Components/NavBar\";\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n\n      <footer>\n        <h1>Footer</h1>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}